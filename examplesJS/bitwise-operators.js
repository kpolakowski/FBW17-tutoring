// BITWISE OPERATORS
// JAVASCRIPT USE 32 BIT INTEGERS IN TWO COMPLEMENT FORMAT
//  4 =  0100
// 16 = 10000
//  5 =  0101


// BITWISE AND
console.log(4 & 16);
// (WHEN BOTH BITES ARE 1, WE GET 1, OTHERWISE 0)
// 00100 = 4
// 10000 = 16
// -----
// 00000 = 0


// BITWISE OR
console.log(4 | 16);
// (WHEN BOTH BITES ARE 0, WE GET 0, OTHERWISE 1)
// 00100 = 4
// 10000 = 16
// -----
// 10100 = 20


// BITWISE XOR
console.log(4 ^ 16);
// WHEN BITS ARE DIFFERENT, WE GET 1
// 00100 = 4
// 10000 = 16
// -----
// 10100 = 20


// BITWISE NOT
console.log(~5);
// IT REVERT EVERY BIT SO 1=0, AND 0=1
// 00000000000000000000000000000101 = 5
// -----
// 11111111111111111111111111111010 = -6


// LEFT SHIFT
console.log(5 << 1);
// WE MOVE EVERY BIT TO THE LEFT SIDE
// 0101 = 5
// -----
// 1010 = 10


// RIGHT SHIFT
console.log(13 >> 1);
// WE MOVE EVERY BIT TO THE RIGHT SIDE
// THE MOSTLEFT BIT IS COPIED AND PUSHED TO THE LEFT
// THE MOSTRIGHT BIT IS REMOVED
// 00000000000000000000000000001101 = 13
// -----
// 00000000000000000000000000000110 = 2


console.log(-6 >>> 3);
// WE MOVE EVERY BIT TO THE RIGHT SIDE
// ONE OR MORE ZEROS ARE PUSHED TO THE LEFT
// THE MOSTRIGHT BIT IS REMOVED
// 11111111111111111111111111111010 = -6
// -----
// 00011111111111111111111111111111 = 536870911